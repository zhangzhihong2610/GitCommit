论文选题&优化项目

ICSE2024：
ICSE（国际软件工程大会）是软件工程领域的顶级会议。2024年的研究论文涵盖了从传统保障（如测试、验证）到新兴挑战（如AI赋能工程、伦理安全）的方方面面。一个非常明显的趋势是人工智能（特别是大语言模型LLMs）在软件工程各个阶段的渗透和应用，相关论文数量非常多。

论文主题分类
我将论文大致分为以下八大类型，并提供了每个类型的核心研究内容和代表性论文标题（意译）以供参考：

1. AI赋能软件工程（AI-Enabled Software Engineering）
	这是今年最庞大、最核心的类别，主要研究如何利用AI（尤其是LLM）来辅助、增强和自动化各种软件开发活动。
	核心内容： 代码生成、缺陷检测与修复、需求生成、自动化测试、代码摘要、开发者助手工具。
	代表论文标题举例：
		RepairAgent: 一个由大语言模型驱动的通用程序修复系统
		LLM能否生成安全的代码？
		Demystifying Practices, Challenges and Expected Features of Using GitHub Copilot
		使用LLM自动化生成用户故事及其验收标准

2. 软件测试与调试（Software Testing & Debugging）
	传统但依然至关重要的领域，关注如何更高效、更有效地发现软件中的缺陷并定位问题。
	核心内容： 测试用例生成、故障定位（Fault Localization）、测试优化（减缩、排序）、调试工具、变异测试。
	代表论文标题举例：
		PRUSTI: 针对Rust语言的API测试生成框架
		通过大规模研究评估基于频谱的故障定位技术的有效性
		JEST: 基于LLM的智能单元测试生成工具

3. 程序分析与验证（Program Analysis & Verification）
	关注在代码层面确保程序的正确性、安全性和可靠性，多涉及静态分析和形式化方法。
	核心内容： 静态分析、符号执行、模型检测、定理证明、规范推断。
	代表论文标题举例：
		SMOKE: 用于Scala编译器的可扩展静态分析框架
		使用差分形式化方法验证编译器优化
		面向指针程序的高效数据流分析

4. 软件安全与隐私（Software Security & Privacy）
	研究软件系统中的漏洞、攻击面以及保护用户数据和系统安全的方法。
	核心内容： 漏洞发现、恶意软件分析、隐私策略检查、加密API误用、供应链安全。
	代表论文标题举例：
		Why and How Should We Publish Vulnerable Open-Source Code?
		对Android应用中加密API误用的实证研究
		揭露NPM供应链中隐藏的代码贡献和其安全影响

5. 软件进化与维护（Software Evolution & Maintenance）
	研究软件在生命周期中的变化，以及如何有效地管理和理解大型、复杂的软件系统。
	核心内容： 代码重构、缺陷预测、克隆检测、库迁移、技术债、代码搜索。
	代表论文标题举例：
		基于学习的自动化重构技术评估
		大型代码库中自动检测和重构克隆代码
		Predicting Change Reviewability via Code Abstraction

6. 人因与协作（Human Factors & Collaboration）
	研究开发者的行为、认知以及团队协作模式，旨在提升开发效率和开发者体验。
	核心内容： 代码审查、开发者生产力、团队协作、教育、开发者情绪。
	代表论文标题举例：
		Code Review中的性别偏见：一项实证研究
		量化代码审查对审阅者的成本
		理解开发者在使用静态分析工具时的喜悦与挫折

7. 新兴系统与范式（Emerging Systems & Paradigms）
	研究针对特定新兴平台和编程范式的软件工程挑战。
	核心内容： 物联网（IoT）、区块链智能合约、量子计算、机器人软件、自动驾驶系统。
	代表论文标题举例：
		针对量子程序的调试技术
		RoboFuzz: 用于机器人系统的模糊测试框架
		理解并检测以太坊智能合约中的内存问题

8. 软件工程实践与实证研究（SE Practices & Empirical Studies）
	通过大规模数据分析和实地调查，揭示软件工程实践中的现象、趋势和问题。
	核心内容： 开源软件研究、大规模数据集创建、经验总结、复现研究。
	代表论文标题举例：
		A First Look of over Two Thousand COVID-19 Software Projects
		对软件工程领域元分析研究的元分析
		一个包含数百万个漏洞修复提交的大型数据集

----------------------------------------------------------------------------------------------------------------------------

ICSE2023

与2024年类似，ICSE 2023的论文同样展现了软件工程领域的广阔和活力。一个非常突出的趋势是：人工智能（AI），特别是大语言模型（LLM），正在深度渗透并变革软件工程的各个方面。此外，对开发者体验、人因、以及软件安全的关注也持续升温。
论文大致分为以下八大类型，并提供了每个类型的核心研究内容和代表性论文标题（意译）以供参考：

1. AI赋能软件工程（AI-Enabled Software Engineering）
	这是数量最多、最受关注的类别，研究如何利用机器学习（ML）和大型语言模型（LLM）来自动化、增强和辅助软件开发的全生命周期。
	核心内容： 代码生成、自动程序修复（APR）、缺陷预测、代码摘要、测试生成、需求工程。
	代表论文标题举例：
		Coder Reviewer Reranking: 基于代码语言模型的代码审查改进方法
		ChatGPT 在程序修复方面表现如何？
		使用预训练模型转换日志语句
		Jigsaw: 构建高效且高质量的ML驱动型程序修复工具

2. 软件测试与分析（Software Testing & Analysis）
	这个传统而至关重要的领域持续产生创新，专注于更高效地发现缺陷、确保代码质量和程序正确性。
	核心内容： 模糊测试（Fuzzing）、测试用例生成与优化、程序分析（静态/动态）、调试、故障定位、符号执行。
	代表论文标题举例：
		Stateful 模糊测试的效能评估
		分布感知的单元测试生成
		理解并改进JVM垃圾回收测试
		Demystifying Memory Corruption Bugs via Memory Operation Synthesis

3. 软件安全（Software Security）
	关注于识别、预防和缓解软件系统中的安全漏洞与隐私风险，尤其关注现实世界中的复杂系统。
	核心内容： 漏洞检测、恶意软件分析、隐私保护、智能合约安全、供应链安全。
	代表论文标题举例：
		为何开发者无法修复由代码分析器发现的漏洞？
		大规模测量Web中的自动Cookie同意弹窗
		理解并检测Node.js包中的隐蔽漏洞
		针对智能合约的自动化漏洞修复

4. 程序修复与进化（Program Repair & Evolution）
	研究软件如何随时间变化和成长，包括如何自动化地改进代码和适应新的环境。
	核心内容： 自动程序修复（APR）、代码重构、库迁移、技术债管理、代码克隆管理。
	代表论文标题举例：
		面向Java流式代码的自动重构技术
		基于历史的测试感知自动程序修复
		理解Android应用中的兼容性问题数据库迁移
		自动化重构以修复Python Pandas库的误用

5. 人因与协作（Human Factors & Collaboration）
	研究开发者的行为、认知、协作以及他们与工具的交互，旨在提升开发效率和开发者福祉。
	核心内容： 代码审查、开发者生产力、团队协作、开发者情绪分析、教育。
	代表论文标题举例：
		代码审查中审阅者推荐的影响因素
		量化代码审查对审阅者的影响
		理解开发者在处理静态分析警报时的决策过程
		探索远程结对编程的体验

6. 实证研究与软件生态系统（Empirical Studies & Software Ecosystems）
	通过分析大规模数据和实地调查，揭示软件工程实践、开源社区和生态系统中的模式、趋势和问题。
	核心内容： 开源软件研究、经验总结、复现研究、挖掘软件仓库（MSR）。
	代表论文标题举例：
		对软件工程领域系统性文献综述（SLR）的再评估
		一个关于软件重构的全球性开发者调查
		大型企业中代码审查实践的实证研究
		分析Stack Overflow上关于算法讨论的性别差异

7. 新兴系统与范式（Emerging Systems & Paradigms）
	研究针对特定新兴平台和编程范式的独特软件工程挑战和解决方案。
	核心内容： 物联网（IoT）、云原生/分布式系统、区块链、机器学习系统（MLSys）、量子软件。
	代表论文标题举例：
		理解并检测配置错误在服务器无状态化的影响
		针对机器学习框架的兼容性问题的实证研究
		IoT嵌入式操作系统中的能源感知调度策略

8. 需求工程与规格说明（Requirements Engineering & Specification）
	关注软件开发的早期阶段，包括如何获取、分析、验证和管理需求。
	核心内容： 需求获取、需求规约生成与分析、法规符合性（如GDPR）。
	代表论文标题举例：
		从隐私政策中自动提取数据实践规范
		基于模型的（Model-Based）需求工程工具的可用性研究

----------------------------------------------------------------------------------------------------------------------------

ICSE2022

ICSE 2022的论文展现了软件工程领域从传统坚实基础到新兴热门方向的完整图谱。几个明显的趋势包括：
1.AI的全面渗透：机器学习（ML）和深度学习（DL）技术在SE各个子领域的应用继续爆炸式增长，但大语言模型（LLM）的论文相比2023/2024年要少，显示出技术演进的快速。
2.对“人”的持续关注：对开发者本身、团队协作、开发体验的研究非常丰富。
3.安全与可靠性的核心地位：软件安全、程序分析、测试等传统保障领域依然是研究的重中之重。
4.新兴应用场景的挑战：针对机器学习系统、物联网（IoT）、区块链等特定领域的软件工程问题受到重视。
论文主题大致分为以下八大类型，并提供了每个类型的核心研究内容和代表性论文标题（意译）以供参考：

1. AI赋能软件工程（AI-Enabled Software Engineering）
	这是最大和最重要的类别，研究如何利用AI技术来自动化和增强软件开发任务。
	核心内容： 代码生成、缺陷预测与修复、代码摘要、代码搜索、测试生成、需求辅助。
	代表论文标题举例：
		使用序列到序列模型进行自动程序修复
		学习对代码变更进行表示以进行评审推荐
		DLFix: 基于上下文融合的深度学习程序修复
		评估代码生成模型在认知复杂度上的表现

2. 软件测试与分析（Software Testing & Analysis）
	专注于提高软件质量的核心领域，研究更高效、更有效的缺陷发现和理解方法。
	核心内容： 模糊测试（Fuzzing）、测试用例生成、回归测试、调试、故障定位、程序分析（静态/动态）。
	代表论文标题举例：
		评估模糊测试器的有效性差异
		基于历史的测试优先级排序的实证研究
		通过动态符号执行理解并优化GPU程序
		JShrink: 针对Java字节码的混淆感知代码减缩技术

3. 软件安全（Software Security）
	关注于识别、理解和消除软件中的安全漏洞与隐私风险。
	核心内容： 漏洞检测、恶意软件分析、隐私策略、智能合约安全、访问控制。
	代表论文标题举例：
		大规模测量Web中的自动Cookie同意弹窗
		理解并检测Node.js包中的隐蔽漏洞
		基于差异分析的Android应用隐私泄露检测
		UChecker: 对Linux内核中的访问控制漏洞进行模糊测试

4. 程序修复、进化与维护（Program Repair, Evolution & Maintenance）
	研究软件在生命周期中如何被修改、改进和适应变化，以及如何管理复杂性。
	核心内容： 自动程序修复（APR）、代码重构、库迁移、技术债、代码异味、代码搜索。
	代表论文标题举例：
		基于历史的测试感知自动程序修复
		自动化重构以修复Python Pandas库的误用
		理解并支持库迁移过程中的API映射
		代码审查中修复代码异味：一项实证研究

5. 人因、协作与实证研究（Human Factors, Collaboration & Empirical Studies）
	研究开发者的行为、认知、团队协作，并通过数据驱动的方法分析软件工程实践。
	核心内容： 代码审查、开发者生产力、团队动态、开发者情绪、经验总结、挖掘软件仓库（MSR）。
	代表论文标题举例：
		代码审查中审阅者推荐的影响因素
		一个关于软件重构的全球性开发者调查
		大型企业中代码审查实践的实证研究
		理解开发者在处理静态分析警报时的决策过程

6. 需求工程与规约（Requirements Engineering & Specification）
	关注软件开发的早期阶段，包括需求的获取、分析、验证和管理。
	核心内容： 需求获取、需求规约、法规符合性（如GDPR）、目标模型。
	代表论文标题举例：
		从隐私政策中自动提取数据实践规范
		基于模型的（Model-Based）需求工程工具的可用性研究
		自然语言需求规范的自动化验证

7. 新兴系统与范式（Emerging Systems & Paradigms）
	研究针对特定新兴平台和编程范式的独特软件工程挑战。
	核心内容： 机器学习系统（MLSys）、物联网（IoT）、区块链/智能合约、量子软件、自动驾驶系统。
	代表论文标题举例：
		针对机器学习框架的兼容性问题的实证研究
		IoT嵌入式操作系统中的能源感知调度策略
		理解并检测以太坊智能合约中的内存问题

8. 软件架构与设计（Software Architecture & Design）
	关注软件系统的高层结构和设计决策，如何保证其质量属性（如性能、可维护性）。
	核心内容： 架构恢复、设计模式、微服务、架构坏味。
	代表论文标题举例：
		基于变化的微服务架构坏味检测
从源代码中恢复软件架构视图的评估
