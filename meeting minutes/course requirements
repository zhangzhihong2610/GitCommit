1.教学活动
1.1 课程作业 50''
	※小测验，15''，week7（week1-6内容）--10.22
	※研究论文报告，10''，week11  --11.5
	    工作量，每人15h。撰写一篇综述，如果团队有 N 名学生成员，则需准确描述、比较和分类关于你选定主题的 N 篇论文。要求如下：
		a.每位学生需查看1篇论文（从ICSE 2022-2024各分会议链接到外部网站、ICSE 2023链接到外部网站、ICSE 2022链接到外部网站中选出）：
			https://conf.researchr.org/track/icse-2024/icse-2024-research-track?#event-overview
			https://conf.researchr.org/track/icse-2023/icse-2023-technical-track?#event-overview
			https://conf.researchr.org/track/icse-2022/icse-2022-papers?#event-overview
			(1)300字总结（动机、关键问题、技术/方法、结果、实验、优点/局限性及技术原因/反例）
			(2)关于改进工作的200字提案（附理由）
		b.团队交付成果：500字总结（通过需求工程，针对一个已审查的问题，详细阐述一种新的解决方案）
		c.个人自我反思（无字数限制）
	※团队项目，软件工程工具，25''，week13  --12.3
		◎编程+项目汇报，每人工作量为40h。
		◎编程项目应为面向开发人员的工具，非日常使用的应用端APP。
		◎6人团至少2个非功能性需求。
		◎敏捷开发3个周期。周期1：week2-5，周期2：week6-9，周期3:10-13。
		◎每周一次例会，暂定每周四下午2:30-6:30。使用燃尽图（ burndown chart）表示剩余工作量的多少。
		◎必须在代码库（Github）中维护一个项目，该项目记录团队每周的活动，作为最终报告中所述项目期间所开展活动的证据。
1.2 期末考试，40''，至少获得30%
1.3 考勤，10''，通过作业随机检查（交作业认为出勤？）

2.项目里程碑    
	第二周结束前，向TA发送团队成员清单和项目编号。确定团队名称和项目名称。
2.1 周期1     week2-5
	开发用户故事，绘制架构草图以满足非功能性需求，编写代码，进行测试，进行评审，识别/跟踪/解决技术债务。
	（1）需求背景（用户痛点）
	日志太长，不能快速定位异常所在；
	（2）需求价值
	开发基于vs code的异常日志解析&定位的插件，
	日志定位使用log llm作为基底，添加开放api接口返回此问题的解决方案
	
	创新点1：我们对top k解决方案进行排序
	创新点2：对上传的log日志，隐私信息掩码，日志长度无限制，日志解析原理，例如正则等
	创新点3：前端交互页面，可视化，易用性。
	
2.2周期2     week6-9
	2.1+代码质量检查。
2.3周期3     week10-13
	2.2+自动化测试、调试与维护支持。
	项目收尾。
	演示、视频和报告撰写。
3. 演示内容：pre和demo视频，5''。使用纸质海报或ppt进行展示。
	◼ 演示应涵盖项目背景、动机、解决的核心技术问题、相关研究综述，阐述解决技术问题时面临的挑战、所采用的解决方案、挑战解决程度及项目创新点，并通过验收测试场景和用户反馈（如有）对软件进行实证评估。
	◼ 演示视频
	◼ 展示所构建软件最具代表性的端到端使用场景。
	◼ 梳理软件开发流程，阐明项目执行期间实施的流程优化原因。重点突出最具创新性或独特性的功能，而非详述所有细节。
	◼ 未来增强功能不应作为演示环节展示所构建软件的组成部分。
		
	演示时间安排如下，可随时提问。
	Session A: 8:00-10:00 am (50%)
	Session B: 10:10-12:00 (50%)
	
4.最终报告，20''。
	◼ 技术创新与创造力（即缺乏创新的项目无法获得A+/A/A-评级）
	◼ 报告撰写（包括组织结构、清晰度、可读性、完整性及一致性）
	◼ 系统设计、方案实现、测试与评估（提供解决方案原型即可）
	◼ 在项目中应用的先进软件工程流程、活动、技术及工具，用于产出解决方案并进行自我反思
	◼ 项目库中的每周工作记录
		
5.注意事项
5.1软件工程工具
	◆ 这是帮助软件开发人员（程序员或项目团队）完成软件开发任务的工具。并非在软件/服务部署后运行软件。（非web/server端程序）
	◆ 例如：敏捷开发工具、项目管理工具、代码审查辅助工具、测试工具、调试工具、代码异味检测工具、技术债务管理工具、设计框架、需求追踪工具、应用审查池关键问题识别工具等
	◆ 可使用任意编程语言进行开发
	◆ 可开发为独立工具、网络服务、应用程序、浏览器扩展、插件等形式。
5.2推荐内容
	◼ 最佳类型是与研究论文相关的工具，这样您就能阅读关于该工具所实现核心算法的论文。
	◼ 实现您原创/改进的算法以解决特定的软件开发问题。
	◼ 工具可以是独立工具，也可以是大型工具的组件（例如Eclipse IDE中的插件）。

5.3参考优化/改进点
（1）现有任务的改进：软件工程工具的核心在于实现软件工程技术，该技术由一系列任务构成。某些现有任务可能存在不足（如不够精确、运行过慢、效率低下、扩展性不足等）。若出现此类情况，可开发替代方法处理该任务（即用您开发的模块替换现有模块）。
（2）降低现有工具的接受阈值：工具的输入/输出可能依赖于过多设置或假设，导致其无法实际应用。您的项目可开发模块来解决此类问题。
（3）在现有工具基础上进行扩展：该工具提供API并解决特定问题。您的项目可修改或增强该工具以解决相关问题。
	例如：在机器学习课程中，您可能使用Pytorch编写训练深度学习模型的代码。能否开发拖放式图形界面，让开发者像玩乐高积木般编写代码？
（4）改变现有工具的应用场景：工具可通过静态检查源代码来生成输出结果，亦可通过动态分析执行日志来生成输出结果，从而发现程序执行过程中的错误。您可将静态分析组件替换为动态分析组件，反之亦然。

5.4团队贡献
	最终报告中展示贡献。

5.5最终交付物
（1）15分钟视频片段用于展示项目
	◼ 第12周提交
（2）第13周周一进行海报展示
	◼ 具体场次（A场或B场）将于第11周前公布
	◼ 请于周一上午（12.1）提交海报/演示文稿以便其他同学获取内容并前往您的展位与团队成员交流
（3） 最终报告及源代码
	◼ 第13周提交
	◼ 请将项目代码存放于GitHub项目中。

******************************************************************************************************
最终报告要求：
◆ 约10000字，不含所有图表、自我反思及参考文献。
◆ 内容包含项目标题、学生姓名、摘要、引言、相关工作、基础知识、所有图表、技术内容、评估、相对贡献、自我反思、参考文献，以及每位学生的个人简介（含学生贡献声明）。
◆ 报告格式需遵循IEEE软件工程汇刊规范。 https://template-selector.ieee.org/secure/templateSelector/publicationType
    Transactions➔IEEE Transactions on Software Engineering ➔ Original Research ➔ Word or LaTeX ➔ Download Template 






大纲：
◆ 项目标题：具有说明性的标题
◆ 列出每位学生及其学号（非EID！）前请先注明团队名称，例如：陈大文 54321987
◆ 摘要：（150字）概述项目解决的核心问题、解决方案及评估结果。
◆ 引言（1-1.5页）：概述背景、待解决问题、现有方案/工具的应对措施、现有工具/方案仍无法解决该问题的缘由、项目构想、解决方案及评估方法。
◆ 相关研究（1页）：呈现您对现有解决方案的调研结果，这些方案旨在解决引言部分所述的问题。
◆ 技术背景（1-2页）：概述理解您的思路与解决方案所需的技术背景信息。
◆ 解决方案（2-3页）：阐述您的解决方案，可包含算法、图表、代码片段及示例演示以辅助说明。
◆ 软件过程：用2页篇幅记录每个迭代的活动与成果（N个迭代的项目总计2*N页），并附全项目燃尽图。
◆ 评估（2-5页）：总结验证或评估结果，证明解决方案解决了报告所述问题，并与现有工具结果对比。
◆ 结论（1页）：重申解决方案的核心价值与创新点。
◆ 评估（2-5页）：总结您对解决方案的验证或评估结果，说明其如何解决报告中提出的问题，并与现有工具的成果进行比较
◆ 结论（1页）：回顾主要成果（流程、活动、技术、交付物、工具、人员及最佳实践）及未来工作方向。
◆ 学生简介：介绍每位学生的背景信息，包括个人身份、专业背景、技术理念、当前研究方向等。对个人完成的工作进行自我反思，阐明并说明对项目的具体贡献。
◆ 相对贡献：参照第8页幻灯片所示方式呈现相对贡献。若信息缺失，则默认所有团队成员贡献均等。
